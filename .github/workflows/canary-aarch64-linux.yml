name: Canary-Aarch64-Linux

on:
  workflow_call:
    inputs:
      repo-id:
        description: 'staging repository id to test'
        required: false
        type: string
        default: ''
      djl-version:
        description: 'djl version to test'
        type: string
        required: false
      pt-version:
        description: 'pytorch version to test'
        type: string
        required: false
        default: ''
  workflow_dispatch:
    inputs:
      repo-id:
        description: 'staging repository id to test'
        required: false
        default: ''
      djl-version:
        description: 'djl version to test'
        required: false
      pt-version:
        description: 'pytorch version to test'
        required: false
        default: ''

jobs:
  canary-test-aarch64-linux:
    if: github.repository == 'deepjavalibrary/djl-demo'
    runs-on: [ self-hosted, aarch64 ]
    container:
      image: amazonlinux:2
      env:
        AWS_REGION: us-east-1
        DJL_STAGING: ${{github.event.inputs.repo-id}}
        DJL_VERSION: ${{github.event.inputs.djl-version}}
        PT_VERSION: ${{github.event.inputs.pt-version}}
        JAVA_HOME: /usr/lib/jvm/java-17-amazon-corretto.aarch64
    timeout-minutes: 30
    needs: create-aarch64-runner
    steps:
      - name: Setup Environment
        run: |
          yum -y update
          yum install -y tar gzip libgomp
          yum -y install java-17-amazon-corretto-devel
      - uses: taiki-e/checkout-action@v1
      - name: Test PyTorch
        working-directory: canary
        run: |
          set -x
          DJL_ENGINE=pytorch-native-auto PYTORCH_VERSION=$PT_VERSION ./gradlew clean run
          rm -rf /root/.djl.ai/
          DJL_ENGINE=pytorch-native-auto PYTORCH_VERSION=1.13.1 ./gradlew clean run
          rm -rf /root/.djl.ai/
          DJL_ENGINE=pytorch-native-auto PYTORCH_VERSION=2.1.2 ./gradlew clean run
          rm -rf /root/.djl.ai/
          DJL_ENGINE=pytorch-native-auto PYTORCH_VERSION=2.3.1 ./gradlew clean run
          rm -rf /root/.djl.ai/
          DJL_ENGINE=pytorch-native-auto PYTORCH_VERSION=2.4.0 ./gradlew clean run
          rm -rf /root/.djl.ai/
          DJL_ENGINE=pytorch-native-cpu-precxx11 ./gradlew clean run
          rm -rf /root/.djl.ai/
          DJL_ENGINE=pytorch-native-cpu-precxx11 PT_VERSION=1.13.1 ./gradlew clean run
          rm -rf /root/.djl.ai/
          DJL_ENGINE=pytorch-native-cpu-precxx11 PT_VERSION=2.1.2 ./gradlew clean run
          rm -rf /root/.djl.ai/
          DJL_ENGINE=pytorch-native-cpu-precxx11 PT_VERSION=2.3.1 ./gradlew clean run
          rm -rf /root/.djl.ai/
          DJL_ENGINE=pytorch-native-cpu-precxx11 PT_VERSION=2.4.0 ./gradlew clean run
          rm -rf /root/.djl.ai/
      - name: Test TensorFlow
        working-directory: canary
        run: |
          set -x
          DJL_ENGINE=tensorflow-native-auto ./gradlew clean run
          rm -rf /root/.djl.ai/
          DJL_ENGINE=tensorflow-native-cpu ./gradlew clean run
          rm -rf /root/.djl.ai/
      # OnnxRuntime 1.17.1 requires GLIBC 2.27
      # - name: Test OnnxRuntime
      #   working-directory: canary
      #   run: |
      #     set -x
      #     DJL_ENGINE=onnxruntime ./gradlew clean run
      #     rm -rf /root/.djl.ai/
      - name: Test Huggingface tokenizers
        working-directory: canary
        run: |
          set -x
          DJL_ENGINE=tokenizers PYTORCH_PRECXX11=true ./gradlew clean run
          rm -rf /root/.djl.ai/
      - name: Test SentencePiece tokenizers
        working-directory: canary
        run: |
          set -x
          DJL_ENGINE=sentencepiece PYTORCH_PRECXX11=true ./gradlew clean run
          rm -rf /root/.djl.ai/
      - name: Test XGBoost
        working-directory: canary
        run: |
          set -x
          DJL_ENGINE=xgboost ./gradlew clean run
          rm -rf /root/.djl.ai/
      # MXNet doesn't support aarch64
      # fastText doesn't support aarch64
      # LightGBM doesn't support aarch64 ?

  create-aarch64-runner:
    if: github.repository == 'deepjavalibrary/djl-demo'
    runs-on: [ self-hosted, scheduler ]
    steps:
      - name: Create new Graviton instance
        id: create_aarch64
        run: |
          cd /home/ubuntu/djl_benchmark_script/scripts
          token=$( curl -X POST -H "Authorization: token ${{ secrets.ACTION_RUNNER_PERSONAL_TOKEN }}" \
          https://api.github.com/repos/deepjavalibrary/djl-demo/actions/runners/registration-token \
          --fail \
          | jq '.token' | tr -d '"' )
          ./start_instance.sh action_graviton $token djl-demo
    outputs:
      aarch64_instance_id: ${{ steps.create_aarch64.outputs.action_graviton_instance_id }}

  stop-runners:
    if: always()
    runs-on: [ self-hosted, scheduler ]
    needs: [ create-aarch64-runner, canary-test-aarch64-linux ]
    steps:
      - name: Stop all instances
        run: |
          cd /home/ubuntu/djl_benchmark_script/scripts
          instance_id=${{ needs.create-aarch64-runner.outputs.aarch64_instance_id }}
          ./stop_instance.sh $instance_id

